kenya_data  <- readr::read_csv("..\\data\\raw_data\\Kenya.csv")
sweden_data <- readr::read_csv("..\\data\\raw_data\\Sweden.csv")
# Combine py of men and women to get total py for each country------------------
world_data$py  <- world_data$py.men + world_data$py.women
kenya_data$py  <- kenya_data$py.men + kenya_data$py.women
sweden_data$py <- sweden_data$py.men + sweden_data$py.women
# Function to compute CBR-------------------------------------------------------
compute_cbr <- function(populationData) {
populationData %>%
group_by(period) %>%
summarise(cbr = sum(births) / sum(py)) %>%
pull()
}
# Compute the CBR for each data set---------------------------------------------
(world_cbr  <- compute_cbr(world_data))
(kenya_cbr  <- compute_cbr(kenya_data))
(sweden_cbr <- compute_cbr(sweden_data))
# Function to compute ASFR
compute_asfr <- function(pop_data) {
pop_data %>%
mutate(asfr = births / py.women)
}
# Compute ASFR for each data set
world_data  <- compute_asfr(world_data)
kenya_data  <- compute_asfr(kenya_data)
sweden_data <- compute_asfr(sweden_data)
# Compare ASFRs for Kenya and Sweden
kenya_data$asfr
sweden_data$asfr
# Function to compute TFR
compute_tfr <- function(population_data) {
population_data %>%
group_by(period) %>%
summarise(tfr=5 * sum(asfr)) %>%
pull()
}
# Compute and view the TFR for each data set
(world_tfr  <- compute_tfr(world_data))
(kenya_tfr  <- compute_tfr(kenya_data))
(sweden_tfr <- compute_tfr(sweden_data))
# Compute totals of women and births in the world by period
totals_world <- world_data %>%
group_by(period) %>%
summarise(total_women = sum(py.women),
total_births = sum(births))
# Compare how much these totals have changed
(changes_totals <- totals_world[2,-1] / totals_world[1,-1])
# Function to compute CDR
compute_cdr <- function (population_data) {
population_data %>%
group_by(period) %>%
summarise(cbr = sum(deaths) / sum(py)) %>%
pull()
}
# Compute and view the CDR for each data set
(world_cdr  <- compute_cdr(world_data))
(kenya_cdr  <- compute_cdr(kenya_data))
(sweden_cdr <- compute_cdr(sweden_data))
# Function to compute ASDR
compute_asdr <- function (pop_data) {
pop_data %>%
mutate(asdr = deaths / py)
}
# Compute ASDR for each data set
world_data  <- compute_asdr(world_data)
kenya_data  <- compute_asdr(kenya_data)
sweden_data <- compute_asdr(sweden_data)
# Compare ASDR for Kenya and Sweden
kenya_data$asdr
sweden_data$asdr
# Function to compute population proportion by period
compute_pop_prop <- function (pop_data) {
pop_data %>%
group_by(period) %>%
mutate(popP = py / sum(py)) %>%
ungroup()
}
# Compute population proportion for each data set
world_data<- compute_pop_prop(world_data)
kenya_data<- compute_pop_prop(kenya_data)
sweden_data<- compute_pop_prop(sweden_data)
# Compute Kenyas CDR Kenya had Sweden's population distribution
mutate(kenya_data,
temp_cdr = asdr * sweden_data$popP) %>%
group_by(period) %>%
summarise(cdrresweden = sum(temp_cdr))
# Compute totals of women and births in the world by period
world_data %>%
group_by(period) %>%
summarise(total_women = sum(py.women),
total_births = sum(births)) ->
totals_world
# Compare how much these totals have changed
(changes_totals <- totals_world[2,-1] / totals_world[1,-1])
View(changes_totals)
View(totals_world)
totals_world[2,-1]
totals_world[1,-1]
# Compare how much these totals have changed
(changes_totals <- (totals_world[2,-1] / totals_world[1,-1])*100)
# Compare how much these totals have changed
(changes_totals <- totals_world[2,-1] / totals_world[1,-1])
#| root.dir: here::here()
# Load packages ----------------------------------------------------------------
library(tidyverse)
# Read data --------------------------------------------------------------------
world_data  <- readr::read_csv("..\\data\\raw_data\\World.csv")
kenya_data  <- readr::read_csv("..\\data\\raw_data\\Kenya.csv")
sweden_data <- readr::read_csv("..\\data\\raw_data\\Sweden.csv")
# Combine py of men and women to get total py for each country
world_data$py  <- world_data$py.men + world_data$py.women
kenya_data$py  <- kenya_data$py.men + kenya_data$py.women
sweden_data$py <- sweden_data$py.men + sweden_data$py.women
# Function to compute CBR
compute_cbr <- function(populationData) {
populationData %>%
group_by(period) %>%
summarise(cbr = sum(births) / sum(py)) %>%
pull()
}
# Compute the CBR for each data set
(world_cbr  <- compute_cbr(world_data))
(kenya_cbr  <- compute_cbr(kenya_data))
(sweden_cbr <- compute_cbr(sweden_data))
# Function to compute ASFR
compute_asfr <- function(pop_data) {
pop_data %>%
mutate(asfr = births / py.women)
}
# Compute ASFR for each data set
world_data  <- compute_asfr(world_data)
kenya_data  <- compute_asfr(kenya_data)
sweden_data <- compute_asfr(sweden_data)
# Compare ASFRs for Kenya and Sweden
kenya_data$asfr
sweden_data$asfr
# Function to compute TFR
compute_tfr <- function(population_data) {
population_data %>%
group_by(period) %>%
summarise(tfr=5 * sum(asfr)) %>%
pull()
}
# Compute and view the TFR for each data set
(world_tfr  <- compute_tfr(world_data))
(kenya_tfr  <- compute_tfr(kenya_data))
(sweden_tfr <- compute_tfr(sweden_data))
# Compute totals of women and births in the world by period
totals_world <- world_data %>%
group_by(period) %>%
summarise(total_women = sum(py.women),
total_births = sum(births))
# Compare how much these totals have changed
(changes_totals <- totals_world[2,-1] / totals_world[1,-1])
# Function to compute CDR
compute_cdr <- function (population_data) {
population_data %>%
group_by(period) %>%
summarise(cbr = sum(deaths) / sum(py)) %>%
pull()
}
# Compute and view the CDR for each data set
(world_cdr  <- compute_cdr(world_data))
(kenya_cdr  <- compute_cdr(kenya_data))
(sweden_cdr <- compute_cdr(sweden_data))
# Function to compute ASDR
compute_asdr <- function (pop_data) {
pop_data %>%
mutate(asdr = deaths / py)
}
# Compute ASDR for each data set
world_data  <- compute_asdr(world_data)
kenya_data  <- compute_asdr(kenya_data)
sweden_data <- compute_asdr(sweden_data)
# Compare ASDR for Kenya and Sweden
kenya_data$asdr
sweden_data$asdr
# Function to compute population proportion by period
compute_pop_prop <- function (pop_data) {
pop_data %>%
group_by(period) %>%
mutate(popP = py / sum(py)) %>%
ungroup()
}
# Compute population proportion for each data set
world_data<- compute_pop_prop(world_data)
kenya_data<- compute_pop_prop(kenya_data)
sweden_data<- compute_pop_prop(sweden_data)
# Compute Kenyas CDR Kenya had Sweden's population distribution
mutate(kenya_data,
temp_cdr = asdr * sweden_data$popP) %>%
group_by(period) %>%
summarise(cdrresweden = sum(temp_cdr))
install.packages("styler")
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
# Combine py of men and women to get total py for each country
world_data$py  <- world_data$py.men + world_data$py.women
# Set working directory---------------------------------------------------------
#| root.dir: here::here()
# Load packages ----------------------------------------------------------------
library(tidyverse)
# Read data --------------------------------------------------------------------
world_data <- readr::read_csv("..\\data\\raw_data\\World.csv")
kenya_data <- readr::read_csv("..\\data\\raw_data\\Kenya.csv")
sweden_data <- readr::read_csv("..\\data\\raw_data\\Sweden.csv")
# Combine py of men and women to get total py for each country
world_data$py  <- world_data$py.men + world_data$py.women
kenya_data$py  <- kenya_data$py.men + kenya_data$py.women
sweden_data$py <- sweden_data$py.men + sweden_data$py.women
# Function to compute CBR
compute_cbr <- function(populationData) {
populationData %>%
group_by(period) %>%
summarise(cbr = sum(births) / sum(py)) %>%
pull()
}
# Compute and view the CBR for each data set
(world_cbr  <- compute_cbr(world_data))
(kenya_cbr  <- compute_cbr(kenya_data))
(sweden_cbr <- compute_cbr(sweden_data))
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::set_style_transformers()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
styler:::set_style_transformers()
styler:::style_selection()
knitr::opts_chunk$set(echo = TRUE)
A[1, 2]
A <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 3, ncol = 2)
A
B <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 3, ncol = 2, byrow = T)
B
A[1, 2]
A[1:2, 1:2]
A[c(1, 3), c(1, 2)]
A[1, ]
A[, 2]
nrow(A)
ncol(A)
dim(A)
t(A)
A
A %*% t(B)
A * B
A %*% t(B)
A * B
rowSums(A)
rowMeans(A)
colSums(A)
colMeans(A)
rowSums(A)
rowMeans(A)
colSums(A)
colMeans(A)
colnames(A) <- c("alpha", "beta")
A
C <- matrix(c(1:8), nrow = 2, ncol = 4)
C
C <- matrix(c(1:8), nrow = 4, ncol = 2)
C
C <- matrix(c(1:8), nrow = 2, ncol = 4)
C
(A.1 <- array(c(1, 2, 3, 4, 5, 6), dim = c(3, 2)))
(A.2 <- array(1:8, dim = c(2, 2, 2)))
D <- A %*% C
D
C <- matrix(c(1:8), nrow = 2, ncol = 4, byrow = T)
C
D <- A %*% C
D
D[3,3]
D_row_2 <- D[2, ]
D_row_2
set.seed(506)
random_array <- array(data = sample(1:100, 27), dim = c(3, 3, 3))
rowSums(random_array) + colSums(random_array)
sum(random_array)
max(random_array[2, ])
max(random_array[2, , ])
mean(random_array[, , 3])
max(random_array[2, , ])
mean(random_array[, , 3])
sum(random_array)
max(random_array[2, , ])
mean(random_array[, , 3])
list(c(5, 2, 7))
list(c(5, 4), 2, 7)
a <- c(1, 5, 3, 2, 6, 10)
b <- c('Male', 'Female', 'Female')
(L  <-  list(b, a))
L[1]
str(L[1])
L[[1]]
str(L[[1]])
random_array
list(c(5, 2, 7))
list(c(5, 4), 2, 7)
a <- c(1, 5, 3, 2, 6, 10)
b <- c('Male', 'Female', 'Female')
(L  <-  list(b, a))
list(c(5, 2, 7))
list(c(5, 4), 2, 7)
a <- c(1, 5, 3, 2, 6, 10)
b <- c('Male', 'Female', 'Female')
(L  <-  list(b, a))
list(c(5, 4), 2, 7)
a <- c(1, 5, 3, 2, 6, 10)
b <- c('Male', 'Female', 'Female')
(L  <-  list(b, a))
L[1]
str(L[1])
L[[1]]
str(L[[1]])
names(L)  <-  c("bvector", "avector")
names(L)
L
L[["bvector"]]
L$bvector
L$avector
str(L)
L_vec <- unlist(L)
L_vec
str(L_vec)
unname(L_vec)
L[1] <- list(matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2))
L
L$bvector <- list(matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2))
names(L)[1] <- "mat1"
L
L[[2]] <- seq(10, 50, by = 2)
L
L$array1 <- array(1, dim = c(2, 3, 2))
L
L
names(L)
psyc_students <- df$department == "Psychology"
height <- c(165, 157, 166, 169, 152)
age <- as.integer(c(22, 24, 19, 18, 23))
department <- factor(
c("Psychology","Statistics","Statistics","Education","Psychology"))
year <- ordered(c(3,1,4,4,2))
(df <- data.frame(height,age,department,year))
str(df)
levels(df$department)
psyc_students <- df$department == "Psychology"
df[psyc_students,]
stats_and_under_22 <- df$department == "Statistics" & df$age < 22
df[stats_and_under_22,]
(df_psych_height <- subset(
x = df,
subset = department == "Psychology",
select = c(height)
))
rm(age)
age
height <- c(165, 157, 166, 169, 152)
age <- as.integer(c(22, 24, 19, 18, 23))
department <- factor(
c("Psychology","Statistics","Statistics","Education","Psychology"))
year <- ordered(c(3,1,4,4,2))
(df <- data.frame(height,age,department,year))
str(df)
levels(df$department)
psyc_students <- df$department == "Psychology"
psyc_students
df[psyc_students,]
stats_and_under_22 <- df$department == "Statistics" & df$age < 22
df[stats_and_under_22,]
v <- df$height > 160
rm(age)
age
attach(df)
age
detach(df)
age
my_list <- list(f, n, m, v)
f <- c("M", "H")
n <- c(1, 2, 3)
m <- c(matrix(1:2), nrow = 2, ncol = 2, byrow = T)
v <- df$height > 160
(f, n, m, v)
my_list <- list(f, n, m, v)
my_list
f <- c("Michaela", "Haig")
n <- c(1, 2, 3)
m <- c(matrix(1:2), nrow = 2, ncol = 2, byrow = T)
v <- df$height > 160
my_list <- list(f, n, m, v)
my_list
v <- c(T, T, F)
my_list <- list(f, n, m, v)
my_list
L[2]
my_list[2]
L[[1]]
L[1]
L[[1]]
my_list[2, 2]
my_list[1[2]]
my_list[2]
my_list[1]
my_list[1(2)]
my_list[, 2]
my_list[f(2)]
my_list[1]
my_list[1, 2]
my_list[1][2]
my_list[[1]][2]
sum(my_list[2])
sum(n)
m[1, 2]
m <- matrix(1:2), nrow = 2, ncol = 2, byrow = T
m <- matrix(c(1:2), nrow = 2, ncol = 2, byrow = T)
my_list <- list(f, n, m, v)
my_list[[1]][2]
sum(n)
m[1, 2]
as.numeric(v)
student_data <- data.frame(
StudentID = 1:5,
Name = c("Alice", "Bob", "Charlie", "David", "Eve"),
Age = c(18, 20, 19, 22, 21),
Grade = c("B", "A", "C", "A", "B")
)
mean(c)
mean(as.numeric(c))
mean(Name)
mean(Age)
mean(student_data$Age)
a_or_b <- df$Grade == "A", "B"
a_or_b <- df$Grade == "A" & "B"
a_or_b <- df$Grade == "A" & df$Grade == "B"
a_or_b <- df$Grade == "A" & df$Grade == "B"
a_or_b
a_or_b <- df$Grade == "A" | df$Grade == "B"
a_or_b
student_data <- data.frame(
StudentID = 1:5,
Name = c("Alice", "Bob", "Charlie", "David", "Eve"),
Age = c(18, 20, 19, 22, 21),
Grade = c("B", "A", "C", "A", "B")
)
a_or_b <- df$Grade == "A" | df$Grade == "B"
a_or_b
a_or_b <- student_data$Grade == "A" | student_data$Grade == "B"
a_or_b
a_or_b_2 <- student_data$Grade %in% c("A", "B")
a_or_b_2
student_data$Grade("Bob") <- "B"
student_data$Grade[2] <- "B"
student_data
my_list <- list(
f = c("Michaela", "Haig"),
n = c(1, 2, 3),
m = matrix(c(1:2), nrow = 2, ncol = 2, byrow = T),
v = c(T, T, F)
)
my_list
my_list[[1]][2]
sum(n)
m[1, 2]
as.numeric(v)
student_data <- data.frame(
StudentID = 1:5,
Name = c("Alice", "Bob", "Charlie", "David", "Eve"),
Age = c(18, 20, 19, 22, 21),
Grade = c("B", "A", "C", "A", "B")
)
mean(student_data$Age)
a_or_b <- student_data$Grade == "A" | student_data$Grade == "B"
a_or_b_2 <- student_data$Grade %in% c("A", "B")
student_data$Grade[2] <- "B"
student_data
View(student_data)
View(student_data)
student_data$Grade[student_data$Name == "Bob"] <- "B"
student_data
a_or_b
a_or_b
student_data$Grade == "A" | student_data$Grade == "B"
a_or_b[student_data$Grade == "A" | student_data$Grade == "B"]
a_or_b
student_data[student_data$Grade %in% c("A", "B"), ]
student_data[student_data$Grade == "A" | student_data$Grade == "B"]
student_data <- data.frame(
StudentID = 1:5,
Name = c("Alice", "Bob", "Charlie", "David", "Eve"),
Age = c(18, 20, 19, 22, 21),
Grade = c("B", "A", "C", "A", "B")
)
student_data[student_data$Grade == "A" | student_data$Grade == "B"]
a_or_b[student_data$Grade == "A" | student_data$Grade == "B"]
a_or_b
